/*
    Problem Link: https://leetcode.com/problems/set-matrix-zeroes/
*/

/***************BRUTE FORCE*************
 U KNOW JUST MAKE ANOTHER DUPLICATE 2-D ARRAY AND DO THE NEEDFULL.
 
 T.C.:- O(N*M)
 S.C. :- O(N*M)
 
 /*********** BETTER APPROACH -**********   USE 2 HASHMAP TO STORE THE POSITION AND ACT USING POINTERS*******************************////////////
 
 T.C : O(N*M)
 S.C:- O(N)
 
 CODE:-
 
 class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int m=matrix.size(), n=matrix[0].size();
        //vector<int>row(m), col(n);
        unordered_set<int> row(m), col(n);
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(matrix[i][j]==0){
                    // row.push_back(i);
                    // col.push_back(j);
                     row.insert(i);
                    col.insert(j);
                }
                
            }
        }

        for(int i=0; i<n; i++){
            for(auto j=row.begin(); j!=row.end(); j++){
                matrix[*j][i]=0;
                }
        }

        for(int i=0; i<m; i++){
            for(auto j=col.begin(); j!=col.end(); j++){
                matrix[i][*j]=0;
            }
        }
        return;
    }
};


/******************BEST APPROACH***********************
TC; O(N*M)
SC: O(1)


CODE:- 
 
 class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        bool RowZero = false;
        bool ColZero = false;
        for (int i = 0; i < matrix[0].size(); i++) //check the first row
        { 
            if (matrix[0][i] == 0) 
            {
                RowZero = true;
                break;
            } 
        }
        for (int i = 0; i < matrix.size(); i++) //check the first column
        { 
            if (matrix[i][0] == 0) 
            {
                ColZero = true;
                break;
            } 
        }
        for (int i = 1; i < matrix.size(); i++) //check except the first row and column
        { 
            for (int j = 1; j < matrix[0].size(); j++) 
            {    
                if (matrix[i][j] == 0) 
                {
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }        
            }
        }
        for (int i = 1; i < matrix.size(); i++) //process except the first row and column 
        {
           for (int j = 1; j < matrix[0].size(); j++)
           {
               if (matrix[i][0] == 0 || matrix[0][j] == 0)
               {
                   matrix[i][j] = 0;
           
               }
           }
        }
        if(RowZero) //handle the first row
        { 
            for (int i = 0; i < matrix[0].size(); i++) 
            {
                matrix[0][i] = 0;
            }
        }
        if (ColZero) //handle the first column
        { 
            for (int i = 0; i < matrix.size(); i++)
            {
                matrix[i][0] = 0;
            }
        }
    }
};
 
